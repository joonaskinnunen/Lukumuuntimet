{"ast":null,"code":"var _jsxFileName = \"/Users/joonaskinnunen/Koodit/Lukumuuntimet/muunna-frontend/src/components/Finance/ExchangeRates.js\";\nimport React, { useState, useEffect } from 'react';\nimport Notification from '../Notification';\nimport { Breadcrumb, Table, Form, Col, InputGroup } from 'react-bootstrap';\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport axios from 'axios';\n\nconst ExchangeRates = () => {\n  const [exchangeRates, setExchangeRates] = useState([]);\n  const [lastUpdated, setLastUpdated] = useState('2020-05-11');\n  const [selectedCurrencies, setSelectedCurrencies] = useState({\n    firstNum: {\n      inputValue: '0',\n      currency: '0'\n    },\n    secondNum: {\n      inputValue: '0',\n      currency: '0'\n    }\n  });\n  const [message, setMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const getCurrencyFromCode = currency => {\n    switch (currency) {\n      case 'CAD':\n        return 'Kanadan dollari';\n\n      case 'JPY':\n        return 'Japanin jeni';\n\n      case 'BGN':\n        return 'Bulgarian leva';\n\n      case 'CZK':\n        return 'Tšekin koruna';\n\n      case 'DKK':\n        return 'Tanskan kruunu';\n\n      case 'GBP':\n        return 'Englannin punta';\n\n      case 'HUF':\n        return 'Unkarin forintti';\n\n      case 'PLN':\n        return 'Puolan zloty';\n\n      case 'RON':\n        return 'Romanian leu';\n\n      case 'SEK':\n        return 'Ruotsin kruunu';\n\n      case 'CHF':\n        return 'Sveitsin frangi';\n\n      case 'NOK':\n        return 'Norjan kruunu';\n\n      case 'HRK':\n        return 'Kroatian kuna';\n\n      case 'RUB':\n        return 'Venäjän rupla';\n\n      case 'TRY':\n        return 'Turkin liira';\n\n      case 'AUD':\n        return 'Australian dollari';\n\n      case 'BRL':\n        return 'Brasilian real';\n\n      case 'CNY':\n        return 'Kiinan juan / renminbi';\n\n      case 'HKD':\n        return 'Hongkongin dollari';\n\n      case 'IDR':\n        return 'Indonesian rupia';\n\n      case 'ILS':\n        return 'Israelin sekeli';\n\n      case 'INR':\n        return 'Intian rupia';\n\n      case 'KRW':\n        return 'Etelä-Korean won';\n\n      case 'MYR':\n        return 'Malesian ringgit';\n\n      case 'NZD':\n        return 'Uuden-Seelannin dollari';\n\n      case 'PHP':\n        return 'Filippiinien peso';\n\n      case 'SGD':\n        return 'Singaporen dollari';\n\n      case 'THB':\n        return 'Thaimaan baht';\n\n      case 'ZAR':\n        return 'Etelä-Afrikan randi';\n\n      case 'USD':\n        return 'Yhdysvaltain dollari';\n\n      case 'ISK':\n        return 'Islannin kruunu';\n\n      case 'MXN':\n        return 'Meksikon peso';\n\n      default:\n        return 'Valuutan nimi';\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Valuuttalaskuri / valuuttamuunnin - Laske & Muunna';\n    axios.get('https://api.exchangeratesapi.io/latest').then(response => {\n      const lastUpdated = response.data.date.split('-').reverse().join('.');\n      setLastUpdated(lastUpdated);\n      let arr = Object.entries(response.data.rates);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i].push(getCurrencyFromCode(arr[i][0]));\n      }\n\n      arr.push([\"EUR\", 1, \"Euro\"]);\n      arr.sort((a, b) => a[2].localeCompare(b[2]));\n      setExchangeRates(arr);\n    });\n  }, []);\n\n  const handleFirstNumChange = value => {\n    value = value.replace(/,/g, '.');\n\n    if (isNaN(value)) {\n      setErrorMessage('Syötetty luku ei ole numero');\n    } else if (value !== 0) {\n      const factor = exchangeRates[selectedCurrencies.secondNum.currency][1] / exchangeRates[selectedCurrencies.firstNum.currency][1];\n      setSelectedCurrencies({\n        secondNum: { ...selectedCurrencies.secondNum,\n          inputValue: value * factor\n        },\n        firstNum: { ...selectedCurrencies.firstNum,\n          inputValue: value\n        }\n      });\n      value.length > 0 ? setMessage(`${value} ${exchangeRates[selectedCurrencies.firstNum.currency][2]} on ${value * factor} ${exchangeRates[selectedCurrencies.secondNum.currency][2]}`) : setMessage('');\n    } else {\n      setMessage('');\n      setErrorMessage('');\n    }\n  };\n\n  const handleSecondNumChange = value => {\n    value = value.replace(/,/g, '.');\n\n    if (isNaN(value)) {\n      setErrorMessage('Syötetty luku ei ole numero');\n    } else if (value !== 0) {\n      const factor = exchangeRates[selectedCurrencies.firstNum.currency][1] / exchangeRates[selectedCurrencies.secondNum.currency][1];\n      setSelectedCurrencies({\n        firstNum: { ...selectedCurrencies.firstNum,\n          inputValue: value * factor\n        },\n        secondNum: { ...selectedCurrencies.secondNum,\n          inputValue: value\n        }\n      });\n      value.length > 0 ? setMessage(`${value} ${exchangeRates[selectedCurrencies.secondNum.currency][2]} on ${value * factor} ${exchangeRates[selectedCurrencies.firstNum.currency][2]}`) : setMessage('');\n    } else {\n      setMessage('');\n      setErrorMessage('');\n    }\n  };\n\n  const handleFirstCurrencyChange = value => {\n    const factor = exchangeRates[selectedCurrencies.secondNum.currency][1] / exchangeRates[value][1];\n    setSelectedCurrencies({\n      secondNum: { ...selectedCurrencies.secondNum,\n        inputValue: selectedCurrencies.firstNum.inputValue * factor\n      },\n      firstNum: { ...selectedCurrencies.firstNum,\n        currency: value\n      }\n    });\n    setMessage(`${selectedCurrencies.firstNum.inputValue} ${exchangeRates[value][2]} on ${selectedCurrencies.firstNum.inputValue * factor} ${exchangeRates[selectedCurrencies.secondNum.currency][2]}`);\n  };\n\n  const handleSecondCurrencyChange = value => {\n    const factor = exchangeRates[value][1] / exchangeRates[selectedCurrencies.firstNum.currency][1];\n    setSelectedCurrencies({\n      firstNum: { ...selectedCurrencies.firstNum\n      },\n      secondNum: { ...selectedCurrencies.secondNum,\n        inputValue: selectedCurrencies.firstNum.inputValue * factor,\n        currency: value\n      }\n    });\n    setMessage(`${selectedCurrencies.firstNum.inputValue} ${exchangeRates[selectedCurrencies.firstNum.currency][2]} on ${selectedCurrencies.firstNum.inputValue * factor} ${exchangeRates[value][2]}`);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Breadcrumb, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(LinkContainer, {\n    to: \"../\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Breadcrumb.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Alkuun\")), React.createElement(LinkContainer, {\n    to: \"./\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(Breadcrumb.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Raha\")), React.createElement(Breadcrumb.Item, {\n    active: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Valuuttalaskuri / valuuttamuunnin\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Valuuttalaskuri / valuuttamuunnin\"), React.createElement(\"div\", {\n    className: \"calculator\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"Valuuttalaskurilla voit muuttaa valitun valuutan arvon toiseen valuuttaan.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"Valitse ensin alkuper\\xE4inen valuutta ja sy\\xF6t\\xE4 vaihdettavan valuutan m\\xE4\\xE4r\\xE4. T\\xE4m\\xE4n j\\xE4lkeen valitse valuutta, johon arvo muutetaan.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }), \"Kun sy\\xF6t\\xE4t uuden arvon jompaan kumpaan kentist\\xE4, toisen valuutan vastaava arvo p\\xE4ivittyy toiseen kentt\\xE4\\xE4n.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"Valuuttalaskurin kurssit haetaan Euroopan keskuspankin tietokannasta.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(Form.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(InputGroup, {\n    as: Col,\n    md: \"6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    value: selectedCurrencies.firstNum.inputValue,\n    onChange: ({\n      target\n    }) => handleFirstNumChange(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    as: Col,\n    md: \"6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    as: \"select\",\n    onChange: ({\n      target\n    }) => handleFirstCurrencyChange(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, exchangeRates.map((x, i) => React.createElement(\"option\", {\n    key: i,\n    value: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, x[0], \" - \", x[2]))))), React.createElement(Form.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(InputGroup, {\n    as: Col,\n    md: \"6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    value: selectedCurrencies.secondNum.inputValue,\n    onChange: ({\n      target\n    }) => handleSecondNumChange(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    as: Col,\n    md: \"6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    as: \"select\",\n    onChange: ({\n      target\n    }) => handleSecondCurrencyChange(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, exchangeRates.map((x, i) => React.createElement(\"option\", {\n    key: i,\n    value: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, x[0], \" - \", x[2])))))), React.createElement(Notification, {\n    message: message,\n    errorMessage: errorMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }))), React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"Valuuttakurssit suhteessa euroon\"), React.createElement(Table, {\n    responsive: \"sm\",\n    size: \"sm\",\n    className: \"table table-bordered table-hover hoverCells\",\n    style: {\n      marginBottom: '50px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    scope: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \"Valuutta\"), React.createElement(\"th\", {\n    scope: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"Valuuttakoodi\"), React.createElement(\"th\", {\n    scope: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, \"EUR\")), exchangeRates.map((x, i) => React.createElement(\"tr\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, x[2]), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, x[0]), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, x[1]))), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    colSpan: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \"Valuttakurssit p\\xE4ivitetty viimeksi \", lastUpdated))))));\n};\n\nexport default ExchangeRates;","map":{"version":3,"sources":["/Users/joonaskinnunen/Koodit/Lukumuuntimet/muunna-frontend/src/components/Finance/ExchangeRates.js"],"names":["React","useState","useEffect","Notification","Breadcrumb","Table","Form","Col","InputGroup","LinkContainer","axios","ExchangeRates","exchangeRates","setExchangeRates","lastUpdated","setLastUpdated","selectedCurrencies","setSelectedCurrencies","firstNum","inputValue","currency","secondNum","message","setMessage","errorMessage","setErrorMessage","getCurrencyFromCode","document","title","get","then","response","data","date","split","reverse","join","arr","Object","entries","rates","i","length","push","sort","a","b","localeCompare","handleFirstNumChange","value","replace","isNaN","factor","handleSecondNumChange","handleFirstCurrencyChange","handleSecondCurrencyChange","target","map","x","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Notification from '../Notification'\nimport { Breadcrumb, Table, Form, Col, InputGroup } from 'react-bootstrap'\nimport { LinkContainer } from \"react-router-bootstrap\"\nimport axios from 'axios';\n\nconst ExchangeRates = () => {\n    const [exchangeRates, setExchangeRates] = useState([])\n    const [lastUpdated, setLastUpdated] = useState('2020-05-11')\n    const [selectedCurrencies, setSelectedCurrencies] = useState({ firstNum: { inputValue: '0', currency: '0' }, secondNum: { inputValue: '0', currency: '0' } })\n    const [message, setMessage] = useState('')\n    const [errorMessage, setErrorMessage] = useState('')\n\n    const getCurrencyFromCode = (currency) => {\n        switch (currency) {\n            case 'CAD':\n                return 'Kanadan dollari'\n            case 'JPY':\n                return 'Japanin jeni'\n            case 'BGN':\n                return 'Bulgarian leva'\n            case 'CZK':\n                return 'Tšekin koruna'\n            case 'DKK':\n                return 'Tanskan kruunu'\n            case 'GBP':\n                return 'Englannin punta'\n            case 'HUF':\n                return 'Unkarin forintti'\n            case 'PLN':\n                return 'Puolan zloty'\n            case 'RON':\n                return 'Romanian leu'\n            case 'SEK':\n                return 'Ruotsin kruunu'\n            case 'CHF':\n                return 'Sveitsin frangi'\n            case 'NOK':\n                return 'Norjan kruunu'\n            case 'HRK':\n                return 'Kroatian kuna'\n            case 'RUB':\n                return 'Venäjän rupla'\n            case 'TRY':\n                return 'Turkin liira'\n            case 'AUD':\n                return 'Australian dollari'\n            case 'BRL':\n                return 'Brasilian real'\n            case 'CNY':\n                return 'Kiinan juan / renminbi'\n            case 'HKD':\n                return 'Hongkongin dollari'\n            case 'IDR':\n                return 'Indonesian rupia'\n            case 'ILS':\n                return 'Israelin sekeli'\n            case 'INR':\n                return 'Intian rupia'\n            case 'KRW':\n                return 'Etelä-Korean won'\n            case 'MYR':\n                return 'Malesian ringgit'\n            case 'NZD':\n                return 'Uuden-Seelannin dollari'\n            case 'PHP':\n                return 'Filippiinien peso'\n            case 'SGD':\n                return 'Singaporen dollari'\n            case 'THB':\n                return 'Thaimaan baht'\n            case 'ZAR':\n                return 'Etelä-Afrikan randi'\n            case 'USD':\n                return 'Yhdysvaltain dollari'\n            case 'ISK':\n                return 'Islannin kruunu'\n            case 'MXN':\n                return 'Meksikon peso'\n            default:\n                return 'Valuutan nimi'\n        }\n    }\n\n    useEffect(() => {\n        document.title = 'Valuuttalaskuri / valuuttamuunnin - Laske & Muunna'\n        axios\n            .get('https://api.exchangeratesapi.io/latest')\n            .then(response => {\n                const lastUpdated = response.data.date.split('-').reverse().join('.')\n                setLastUpdated(lastUpdated)\n                let arr = Object.entries(response.data.rates)\n                for (let i = 0; i < arr.length; i++) {\n                    arr[i].push(getCurrencyFromCode(arr[i][0]))\n                }\n                arr.push([\"EUR\", 1, \"Euro\"])\n                arr.sort((a, b) => a[2].localeCompare(b[2]))\n                setExchangeRates(arr)\n            })\n    }, [])\n\n    const handleFirstNumChange = (value) => {\n        value = value.replace(/,/g, '.')\n        if (isNaN(value)) {\n            setErrorMessage('Syötetty luku ei ole numero')\n        } else if (value !== 0) {\n            const factor = exchangeRates[selectedCurrencies.secondNum.currency][1] / exchangeRates[selectedCurrencies.firstNum.currency][1]\n            setSelectedCurrencies({ secondNum: { ...selectedCurrencies.secondNum, inputValue: value * factor }, firstNum: { ...selectedCurrencies.firstNum, inputValue: value } })\n            value.length > 0 ? setMessage(`${value} ${exchangeRates[selectedCurrencies.firstNum.currency][2]} on ${value * factor} ${exchangeRates[selectedCurrencies.secondNum.currency][2]}`) : setMessage('')\n        } else {\n            setMessage('')\n            setErrorMessage('')\n        }\n    }\n\n    const handleSecondNumChange = (value) => {\n        value = value.replace(/,/g, '.')\n        if (isNaN(value)) {\n            setErrorMessage('Syötetty luku ei ole numero')\n        } else if (value !== 0) {\n            const factor = exchangeRates[selectedCurrencies.firstNum.currency][1] / exchangeRates[selectedCurrencies.secondNum.currency][1]\n            setSelectedCurrencies({ firstNum: { ...selectedCurrencies.firstNum, inputValue: value * factor }, secondNum: { ...selectedCurrencies.secondNum, inputValue: value } })\n            value.length > 0 ? setMessage(`${value} ${exchangeRates[selectedCurrencies.secondNum.currency][2]} on ${value * factor} ${exchangeRates[selectedCurrencies.firstNum.currency][2]}`) : setMessage('')\n        } else {\n            setMessage('')\n            setErrorMessage('')\n        }\n    }\n\n    const handleFirstCurrencyChange = (value) => {\n        const factor = exchangeRates[selectedCurrencies.secondNum.currency][1] / exchangeRates[value][1]\n        setSelectedCurrencies({ secondNum: { ...selectedCurrencies.secondNum, inputValue: selectedCurrencies.firstNum.inputValue * factor }, firstNum: { ...selectedCurrencies.firstNum, currency: value } })\n        setMessage(`${selectedCurrencies.firstNum.inputValue} ${exchangeRates[value][2]} on ${selectedCurrencies.firstNum.inputValue * factor} ${exchangeRates[selectedCurrencies.secondNum.currency][2]}`)\n    }\n\n    const handleSecondCurrencyChange = (value) => {\n        const factor = exchangeRates[value][1] / exchangeRates[selectedCurrencies.firstNum.currency][1]\n        setSelectedCurrencies({ firstNum: { ...selectedCurrencies.firstNum }, secondNum: { ...selectedCurrencies.secondNum, inputValue: selectedCurrencies.firstNum.inputValue * factor, currency: value } })\n        setMessage(`${selectedCurrencies.firstNum.inputValue} ${exchangeRates[selectedCurrencies.firstNum.currency][2]} on ${selectedCurrencies.firstNum.inputValue * factor} ${exchangeRates[value][2]}`)\n    }\n\n    return (\n        <div>\n            <Breadcrumb>\n                <LinkContainer to=\"../\">\n                    <Breadcrumb.Item>\n                        Alkuun\n                </Breadcrumb.Item>\n                </LinkContainer>\n                <LinkContainer to=\"./\">\n                    <Breadcrumb.Item>\n                        Raha\n                </Breadcrumb.Item>\n                </LinkContainer>\n                <Breadcrumb.Item active>\n                    Valuuttalaskuri / valuuttamuunnin\n                    </Breadcrumb.Item>\n            </Breadcrumb>\n            <div>\n                <h2>\n                    Valuuttalaskuri / valuuttamuunnin\n                </h2>\n                <div className=\"calculator\">\n                    <p>Valuuttalaskurilla voit muuttaa valitun valuutan arvon toiseen valuuttaan.</p>\n                    <p>Valitse ensin alkuperäinen valuutta ja syötä vaihdettavan valuutan määrä. Tämän jälkeen valitse valuutta, johon arvo muutetaan.\n                        <br />\n                        Kun syötät uuden arvon jompaan kumpaan kentistä, toisen valuutan vastaava arvo päivittyy toiseen kenttään.\n                    </p>\n                    <p>Valuuttalaskurin kurssit haetaan Euroopan keskuspankin tietokannasta.</p>\n                    <p>\n                    </p>\n                    <form>\n                        <Form.Row>\n                            <InputGroup as={Col} md=\"6\">\n                                <Form.Control\n                                    value={selectedCurrencies.firstNum.inputValue}\n                                    onChange={({ target }) => handleFirstNumChange(target.value)} />\n                            </InputGroup>\n                            <Form.Group as={Col} md=\"6\">\n                                <Form.Control as=\"select\"\n                                    onChange={({ target }) => handleFirstCurrencyChange(target.value)}\n                                >\n                                    {exchangeRates.map((x, i) => <option key={i} value={i}>{x[0]} - {x[2]}</option>)}\n                                </Form.Control>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <InputGroup as={Col} md=\"6\">\n                                <Form.Control\n                                    value={selectedCurrencies.secondNum.inputValue}\n                                    onChange={({ target }) => handleSecondNumChange(target.value)}\n                                />\n                            </InputGroup>\n                            <Form.Group as={Col} md=\"6\">\n                                <Form.Control as=\"select\"\n                                    onChange={({ target }) => handleSecondCurrencyChange(target.value)}\n                                >\n                                    {exchangeRates.map((x, i) => <option key={i} value={i}>{x[0]} - {x[2]}</option>)}\n                                </Form.Control>\n                            </Form.Group>\n                        </Form.Row>\n                    </form>\n                    <Notification message={message} errorMessage={errorMessage} />\n                </div>\n            </div>\n            <h4>Valuuttakurssit suhteessa euroon</h4>\n            <Table responsive='sm' size='sm' className='table table-bordered table-hover hoverCells' style={{ marginBottom: '50px' }}>\n                <tbody>\n                    <tr>\n                        <th scope=\"row\">Valuutta</th>\n                        <th scope=\"row\">Valuuttakoodi</th>\n                        <th scope=\"row\">EUR</th>\n                    </tr>\n                    {exchangeRates.map((x, i) => <tr key={i}><td>{x[2]}</td><td>{x[0]}</td><td>{x[1]}</td></tr>)}\n                    <tr>\n                        <td colSpan='3'>\n                            <b>Valuttakurssit päivitetty viimeksi {lastUpdated}</b>\n                        </td>\n                    </tr>\n                </tbody>\n            </Table>\n        </div>\n    )\n}\nexport default ExchangeRates"]},"metadata":{},"sourceType":"module"}