{"ast":null,"code":"var _jsxFileName = \"/Users/joonaskinnunen/Koodit/Lukumuuntimet/muunna-frontend/src/components/Useful/CharCount.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Breadcrumb } from 'react-bootstrap';\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nconst CharCount = () => {\n  useEffect(() => {\n    document.title = 'Sanalaskuri - Laske & Muunna';\n  });\n  const [string, setString] = useState('');\n  const [results, setResults] = useState({\n    length: {\n      chars: 0,\n      charsWithoutSpaces: 0\n    },\n    words: {\n      popularWords: [],\n      numOfWords: 0,\n      avgLength: 0\n    },\n    sentences: 0,\n    newLines: 0\n  });\n\n  const handleChange = value => {\n    setString(value);\n    setResults({ ...results,\n      words: countWords(value),\n      length: countChar(value),\n      sentences: countSentences(value),\n      newLines: countNewLines(value)\n    });\n\n    if (value.length === 0) {\n      setResults({\n        length: {\n          chars: 0,\n          charsWithoutSpaces: 0\n        },\n        words: {\n          popularWords: [],\n          numOfWords: 0,\n          avgLength: 0\n        },\n        sentences: 0,\n        newLines: 0\n      });\n    }\n  };\n\n  const countChar = value => {\n    let spaces = 0;\n\n    for (let i = 0; i < value.length; i++) {\n      if (value.charAt(i).match(/\\s+$/)) {\n        spaces++;\n      }\n    }\n\n    return {\n      chars: value.length,\n      charsWithoutSpaces: value.length - spaces\n    };\n  };\n\n  const countWords = value => {\n    let str = value.replace(/(^\\s*)|(\\s*$)/gi, '');\n    str = str.replace(/[\\r\\n\\u0085\\u2028\\u2029]+/g, ' ');\n    str = str.replace(/[ ]{2,}/gi, ' ');\n    str = str.replace(/\\n /, \"\\n\");\n    str = str.split(' ');\n    str = str.map(x => x.replace(/[.,;:!?]/g, ''));\n    let counts = {};\n    str.forEach(function (x) {\n      counts[x.toLowerCase()] = (counts[x.toLowerCase()] || 0) + 1;\n    });\n    let wordsArr = Object.entries(counts);\n    wordsArr = wordsArr.sort((a, b) => b[1] - a[1]);\n    let sumOfLengths = 0;\n    wordsArr.map(x => sumOfLengths += x[0].length * x[1]);\n    let words = {\n      popularWords: wordsArr.length > 10 ? wordsArr.splice(9, wordsArr.length - 1) : wordsArr,\n      numOfWords: str.length,\n      avgLength: sumOfLengths / str.length\n    };\n    return words;\n  };\n\n  const countSentences = value => {\n    let numOfSentences = value.replace(/(\\.+|:|!|\\?)(\"*|'*|\\)*|}*|]*)(\\s|\\n|\\r|\\r\\n)/gm, \"$1$2|\").split(\"|\").length;\n\n    if (value.charAt(value.length - 1) === ' ' && value.charAt(value.length - 2) === '.') {\n      numOfSentences--;\n    }\n\n    return numOfSentences;\n  };\n\n  const countNewLines = value => {\n    let newLines = value.split(/\\r\\n|\\r|\\n/).length;\n\n    for (let i = value.length - 1; i > 0; i--) {\n      if (value.charAt(i).match(/\\r\\n|\\r|\\n/) && value.charAt(i - 1).match(/\\r\\n|\\r|\\n/)) {\n        newLines--;\n      }\n    }\n\n    if (value.charAt(value.length - 1).match(/\\r\\n|\\r|\\n/)) {\n      newLines--;\n    }\n\n    return newLines;\n  };\n\n  const pStyle = {\n    marginTop: 20\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Breadcrumb, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(LinkContainer, {\n    to: \"../../\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Breadcrumb.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Alkuun\")), React.createElement(LinkContainer, {\n    to: \"../\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Breadcrumb.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Hy\\xF6ty\")), React.createElement(Breadcrumb.Item, {\n    active: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Sanalaskuri\")), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Sanalaskuri\"), React.createElement(\"div\", {\n    className: \"calculator\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Sanalaskuri / merkkilaskuri laskee sy\\xF6tetyn tekstin merkkien ja sanojen m\\xE4\\xE4r\\xE4n.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Teksti sis\\xE4lt\\xE4\\xE4 \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, results.length.charsWithoutSpaces), \" merkki\\xE4 ja \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, results.words.numOfWords), \" sanaa.\")), React.createElement(\"div\", {\n    className: \"input-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-group-prepend\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"input-group-text\",\n    id: \"basic-addon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-pencil-alt prefix\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }))), React.createElement(\"textarea\", {\n    className: \"form-control\",\n    rows: \"10\",\n    value: string,\n    onChange: ({\n      target\n    }) => handleChange(target.value),\n    placeholder: \"Sy\\xF6t\\xE4 tekstisi t\\xE4h\\xE4n. T\\xE4m\\xE4 sanalaskuri / merkkilaskuri laskee tekstin merkkien ja sanojen m\\xE4\\xE4r\\xE4n.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    style: pStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Teksti sis\\xE4lt\\xE4\\xE4:\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, results.length.charsWithoutSpaces), \" merkki\\xE4\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, results.length.chars), \" merkki\\xE4 v\\xE4lily\\xF6nnit ja rivinvaihdot mukaan luettuna\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, results.words.numOfWords), \" sanaa\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, results.sentences), \" lausetta\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, results.newLines), \" kappaletta\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, Math.round(results.words.avgLength * 100) / 100), \" kirjainta keskim\\xE4\\xE4rin sanassa\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Eniten toistuvat sanat:\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, results.words.popularWords.map(x => React.createElement(\"li\", {\n    key: x,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, x[0], \" (\", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, x[1]), \" kpl. \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, Math.round(x[1] / results.words.numOfWords * 100 * 100) / 100), \" %)\")))), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Merkkilaskuri / sanalaskuri\"), \" on laskuri, jolla voit laskea sy\\xF6tetyn tekstin merkkien, lauseiden, kappaleiden ja sanojen m\\xE4\\xE4r\\xE4n. Laskuri n\\xE4ytt\\xE4\\xE4 my\\xF6s tekstiss\\xE4 yleisimmin esiintyv\\xE4t sanat ja sanojen keskim\\xE4\\xE4r\\xE4isen pituuden.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Voit liitt\\xE4\\xE4 haluamasi tekstin esimerkiksi Wordista tai muusta tekstink\\xE4sittelyohjelmasta tai vaikka verkkosivulta laskurin tekstikentt\\xE4\\xE4n ja laskuri n\\xE4ytt\\xE4\\xE4 merkkien ja sanojen m\\xE4\\xE4r\\xE4n ja muut tiedot tekstist\\xE4.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Voit hy\\xF6dynt\\xE4\\xE4 sanalaskuria esimerkiksi jos kirjoitat esseet\\xE4 ja esseen on t\\xE4ytett\\xE4v\\xE4 v\\xE4himm\\xE4is-sanam\\xE4\\xE4r\\xE4.\"));\n};\n\nexport default CharCount;","map":{"version":3,"sources":["/Users/joonaskinnunen/Koodit/Lukumuuntimet/muunna-frontend/src/components/Useful/CharCount.js"],"names":["React","useState","useEffect","Breadcrumb","LinkContainer","CharCount","document","title","string","setString","results","setResults","length","chars","charsWithoutSpaces","words","popularWords","numOfWords","avgLength","sentences","newLines","handleChange","value","countWords","countChar","countSentences","countNewLines","spaces","i","charAt","match","str","replace","split","map","x","counts","forEach","toLowerCase","wordsArr","Object","entries","sort","a","b","sumOfLengths","splice","numOfSentences","pStyle","marginTop","target","Math","round"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Breadcrumb } from 'react-bootstrap'\nimport { LinkContainer } from \"react-router-bootstrap\"\n\nconst CharCount = () => {\n\n    useEffect(() => {\n        document.title = 'Sanalaskuri - Laske & Muunna'\n    })\n\n    const [string, setString] = useState('')\n    const [results, setResults] = useState({ length: { chars: 0, charsWithoutSpaces: 0 }, words: { popularWords: [], numOfWords: 0, avgLength: 0 }, sentences: 0, newLines: 0 })\n\n    const handleChange = (value) => {\n        setString(value)\n        setResults({ ...results, words: countWords(value), length: countChar(value), sentences: countSentences(value), newLines: countNewLines(value) })\n        if (value.length === 0) {\n            setResults({ length: { chars: 0, charsWithoutSpaces: 0 }, words: { popularWords: [], numOfWords: 0, avgLength: 0 }, sentences: 0, newLines: 0 })\n        }\n    }\n\n    const countChar = (value) => {\n        let spaces = 0\n        for (let i = 0; i < value.length; i++) {\n            if (value.charAt(i).match(/\\s+$/)) {\n                spaces++\n            }\n        }\n        return {\n            chars: value.length,\n            charsWithoutSpaces: value.length - spaces\n        }\n    }\n\n    const countWords = (value) => {\n        let str = value.replace(/(^\\s*)|(\\s*$)/gi, '')\n        str = str.replace(/[\\r\\n\\u0085\\u2028\\u2029]+/g, ' ')\n        str = str.replace(/[ ]{2,}/gi, ' ')\n        str = str.replace(/\\n /, \"\\n\")\n        str = str.split(' ')\n        str = str.map((x) => x.replace(/[.,;:!?]/g, ''))\n        let counts = {}\n        str.forEach(function (x) { counts[x.toLowerCase()] = (counts[x.toLowerCase()] || 0) + 1 })\n        let wordsArr = Object.entries(counts)\n        wordsArr = wordsArr.sort((a, b) => b[1] - a[1])\n        let sumOfLengths = 0\n        wordsArr.map(x => sumOfLengths += x[0].length * x[1])\n        let words = {\n            popularWords: wordsArr.length > 10 ? wordsArr.splice(9, wordsArr.length - 1) : wordsArr,\n            numOfWords: str.length,\n            avgLength: sumOfLengths / str.length\n        }\n        return words\n    }\n\n    const countSentences = (value) => {\n        let numOfSentences = value.replace(/(\\.+|:|!|\\?)(\"*|'*|\\)*|}*|]*)(\\s|\\n|\\r|\\r\\n)/gm, \"$1$2|\").split(\"|\").length\n        if (value.charAt(value.length - 1) === ' ' && value.charAt(value.length - 2) === '.') {\n            numOfSentences--\n        }\n        return numOfSentences\n    }\n\n    const countNewLines = (value) => {\n        let newLines = value.split(/\\r\\n|\\r|\\n/).length\n        for (let i = value.length - 1; i > 0; i--) {\n            if (value.charAt(i).match(/\\r\\n|\\r|\\n/) && value.charAt(i - 1).match(/\\r\\n|\\r|\\n/)) {\n                newLines--\n            }\n        }\n        if (value.charAt(value.length - 1).match(/\\r\\n|\\r|\\n/)) {\n            newLines--\n        }\n        return newLines\n    }\n\n    const pStyle = {\n        marginTop: 20\n    }\n\n    return (\n        <div>\n            <Breadcrumb>\n                <LinkContainer to=\"../../\">\n                    <Breadcrumb.Item>\n                        Alkuun\n                    </Breadcrumb.Item>\n                </LinkContainer>\n                <LinkContainer to=\"../\">\n                    <Breadcrumb.Item>\n                        Hyöty\n                    </Breadcrumb.Item>\n                </LinkContainer>\n                <Breadcrumb.Item active>\n                    Sanalaskuri\n                </Breadcrumb.Item>\n            </Breadcrumb>\n            <h2>\n                Sanalaskuri\n            </h2>\n            <div className=\"calculator\">\n                <p>\n                    Sanalaskuri / merkkilaskuri laskee syötetyn tekstin merkkien ja sanojen määrän.\n            </p>\n                <p><b>Teksti sisältää <b>{results.length.charsWithoutSpaces}</b> merkkiä ja <b>{results.words.numOfWords}</b> sanaa.</b></p>\n                <div className=\"input-group\">\n                    <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\" id=\"basic-addon\">\n                            <i className=\"fas fa-pencil-alt prefix\"></i>\n                        </span>\n                    </div>\n                    <textarea className=\"form-control\" rows=\"10\" value={string} onChange={({ target }) => handleChange(target.value)} placeholder='Syötä tekstisi tähän. Tämä sanalaskuri / merkkilaskuri laskee tekstin merkkien ja sanojen määrän.'></textarea>\n                </div>\n                <p style={pStyle}>Teksti sisältää:</p>\n                <ul>\n                    <li>\n                        <b>{results.length.charsWithoutSpaces}</b> merkkiä\n                </li>\n                    <li>\n                        <b>{results.length.chars}</b> merkkiä välilyönnit ja rivinvaihdot mukaan luettuna\n                </li>\n                    <li>\n                        <b>{results.words.numOfWords}</b> sanaa\n                </li>\n                    <li>\n                        <b>{results.sentences}</b> lausetta\n                </li>\n                    <li>\n                        <b>{results.newLines}</b> kappaletta\n                </li>\n                    <li>\n                        <b>{Math.round(results.words.avgLength * 100) / 100}</b> kirjainta keskimäärin sanassa\n                </li>\n                </ul>\n                <p>Eniten toistuvat sanat:</p>\n                <ul>\n                    {results.words.popularWords.map(x => <li key={x}>{x[0]} (<b>{x[1]}</b> kpl. <b>{Math.round(x[1] / results.words.numOfWords * 100 * 100) / 100}</b> %)</li>)}\n                </ul>\n            </div>\n            <p><b>Merkkilaskuri / sanalaskuri</b> on laskuri, jolla voit laskea syötetyn tekstin merkkien, lauseiden, kappaleiden ja sanojen määrän. Laskuri näyttää myös tekstissä yleisimmin esiintyvät sanat ja sanojen keskimääräisen pituuden.</p>\n            <p>Voit liittää haluamasi tekstin esimerkiksi Wordista tai muusta tekstinkäsittelyohjelmasta tai vaikka verkkosivulta laskurin tekstikenttään ja laskuri näyttää merkkien ja sanojen määrän ja muut tiedot tekstistä.</p>\n            <p>Voit hyödyntää sanalaskuria esimerkiksi jos kirjoitat esseetä ja esseen on täytettävä vähimmäis-sanamäärä.</p>\n        </div>\n    )\n}\n\nexport default CharCount"]},"metadata":{},"sourceType":"module"}